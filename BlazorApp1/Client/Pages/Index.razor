@page "/"
@using System.Net.Http.Headers;
@using BlazorApp1.Shared
@using System.ComponentModel.DataAnnotations
@using Newtonsoft.Json;
@inject HttpClient Http

<PageTitle>Upload Files</PageTitle>
<div class="center">
    <div class="container">
        <div class="file-drop-zone @HoverClass item-a"
        @ondragenter="OnDragEnter"
        @ondragleave="OnDragLeave" @ondragover="OnDragEnter">
            <InputFile OnChange="@OnInputFileChange" accept="application/vnd.openxmlformats-officedocument.wordprocessingml.document" />
        </div>

        <div class="email-form ">
            <form @onsubmit="HandleSubmit" class=" form">
                <div class="form-group item-b">

                    <input type="email" id="email" @bind="Email" class="form-control" placeholder="Enter your email" required />
                    
                    
                </div>
                <div class="submit-button item-c">
                    <button type="submit" class="btn btn-primary" @onclick="OnButtonSubmitClick">Submit</button>
                </div>
                
            </form>
        </div>
        <div class=" message">
            <p class="alert alert-info">@Message</p>
        </div>
        
    </div>
</div>


@code {
    [Required]
    [EmailAddress(ErrorMessage = "Invalid email format")]
    private string Email = "";

    private bool submitted = false;
    string Message = "No file(s) selected";
    private long maxFileSize = 1024 * 1024 * 15;
    private MultipartFormDataContent form = new();
    private string HoverClass = string.Empty;
    string allowedExtension = ".docx";

    void OnDragEnter(DragEventArgs e) => HoverClass = "hover";
    void OnDragLeave(DragEventArgs e) => HoverClass = string.Empty;


    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file is null)
        {
            return;
        }

        if (file.Size > maxFileSize)
        {
            Message = $"File {file.Name} is too big try another file!";
            return;
        }

        var fileExtension = System.IO.Path.GetExtension(file.Name).ToLowerInvariant();

        if (fileExtension != allowedExtension)
        {
            Message = "Invalid file extension. Please select a .docx file.";
            HoverClass = string.Empty;
            return;
        }

        Message = $"File {file.Name} selected";
        form = new MultipartFormDataContent();
        var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
        fileContent.Headers.ContentType = MediaTypeHeaderValue.Parse("multipart/form-data");
        form.Add(fileContent, "File", file.Name);


    }


    private async Task OnButtonSubmitClick()
    {
        if (!Convert.ToBoolean(form.Count()))
        {
            Message = "No file(s) selected";
            return;
        }

        if (Email == "")
        {
            //write that email is choosen
            return;
        }
        // this is the changed part
        form.Add(new StringContent(Email), "Email");

        try
        {
            var response = await Http.PostAsync("/api/File", form);

            if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                Message = await response.Content.ReadAsStringAsync();
            }

            if (response.StatusCode == System.Net.HttpStatusCode.OK)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                BlobResponseDto blobResponse = JsonConvert.DeserializeObject<BlobResponseDto>(responseContent);
                Message = blobResponse.Status + " and sent to " + blobResponse.EmailTo;
            }

            response.EnsureSuccessStatusCode();
            //var responseContent = await response.Content.ReadAsStringAsync();
            //Console.WriteLine("UploadFileInModel_WithHttpClientAsync response :" + responseContent);
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine("HTTP Request Exception: " + ex.Message);
        }
        catch (Exception ex)
        {
            Console.WriteLine("An unexpected exception occurred: " + ex.Message);
        }



        Message = "No file(s) selected";
        form = new MultipartFormDataContent();
        Email = "";
    }

    private async Task HandleSubmit() => submitted = true;

   
}




@*@if (fileNames.Count > 0)
{
<div class="submit-button item-c">
            <button class="btn btn-primary" @onclick="OnButtonSubmitClick" type="submit">Submit! </button>
        </div>



    <ul>
        @foreach (var fileName in fileNames)
        {
           <li>
               File : @fileName
               <br>
               <span>
                   Stored File Name: @GetStoredFileName(fileName)
               </span>
           </li>
        }
    </ul>



    <h1 class="display-4">Upload Files!</h1>
    <div class="form-group">
    <InputFile OnChange="@OnInputFileChange" accept="application/vnd.openxmlformats-officedocument.wordprocessingml.document" class="form-control-file" />
</div>
<p class="alert alert-info">@Message</p>


}*@


@* @using Microsoft.Extensions.Logging
@inject ILogger<Index> Logger

<h3>Upload Files</h3>

<p>
    <label>
        Max file size:
        <input type="number" @bind="maxFileSize" />
    </label>
</p>

<p>
    <label>
        Max allowed files:
        <input type="number" @bind="maxAllowedFiles" />
    </label>
</p>

<p>
    <label>
        Upload up to @maxAllowedFiles of up to @maxFileSize bytes:
        <InputFile OnChange="@LoadFiles" multiple />
    </label>
</p>

@if (isLoading)
{
    <p>Uploading...</p>
}
else
{
    <ul>
        @foreach (var file in loadedFiles)
        {
            <li>
                <ul>
                    <li>Name: @file.Name</li>
                    <li>Last modified: @file.LastModified.ToString()</li>
                    <li>Size (bytes): @file.Size</li>
                    <li>Content type: @file.ContentType</li>
                </ul>
            </li>
        }
    </ul>
}

@code {
    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 15;
    private int maxAllowedFiles = 3;
    private bool isLoading;

    private void LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFiles.Clear();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                loadedFiles.Add(file);
            }
            catch (Exception ex)
            {
                Logger.LogError("File: {Filename} Error: {Error}",
                    file.Name, ex.Message);
            }
        }

        isLoading = false;
    }
} *@